#!/bin/bash -e

function showHelp() {
cat << EOF
Usage:
  build [options] <tasks(s)> <python version(s)>

Options:
  -h, --help       display this help information
  -v, --verbose    print output to console during container execution
      --gpu        enable gpu support on task execution
      --no-cache   runs docker build without using the cache

Default:
  run unit and type tests for 3.8-3.11 as well as lint and docs

Python Versions:
  3.8, 3.9, 3.10 and 3.11 are supported for unit, func and type tasks

Tasks:
  unit    run unit tests
  func    run functional tests
  type    run typecheck
  lint    run static code analysis
  docs    generate documentation
  deps    generate list of shipped dependencies

Note:
  lint, docs, and deps are always performed on python 3.11
EOF
exit $1
}

options=$(getopt -l "help,verbose,gpu,no-cache,build-only" -o "hvb" -n "build" -- "$@")
eval set -- "$options"
while true; do
    case "$1" in
        -h|--help)       showHelp;;
        -v|--verbose)    export verbose=1;;
        --gpu)           export gpuflag="--gpus all";;
        --no-cache)      export no_cache="--no-cache";;
        -b|--build-only) build_only="true";;
        --)              shift; break;;
    esac
    shift
done

if [[ -f .settings ]]; then
    if [[ $(cat .settings | grep save-build-images) ]]; then
        export save_build_images="true"
    fi
fi

# declare lookup maps
declare -A supported_pvers=([3.8]=1 [3.9]=1 [3.10]=1 [3.11]=1)
declare -A supported_tasks=([unit]=1 [func]=1 [type]=1)
declare -A supported_other=([lint]=1 [docs]=1 [deps]=1)

# generate python and task lists
declare -a pvers; declare -a tasks;
count=0; c_pvers=0; c_tasks=0; c_other=0;

# validate args
for arg do
    if [[ $arg == -* ]]; then continue; fi
    if [[ ${supported_pvers["$arg"]} ]]; then pvers+=($arg); ((++c_pvers)); fi
    if [[ ${supported_tasks["$arg"]} ]]; then tasks+=($arg); ((++c_tasks)); fi
    if [[ ${supported_other["$arg"]} ]]; then tasks+=($arg); ((++c_other)); fi
    ((++count))
done

# show help if arg count mismatch
if [[ $((c_pvers + c_tasks + c_other)) != $count ]]; then showHelp 1; fi

# set defaults if not specified
if [[ $count == 0 || ($c_pvers == 0 && $c_tasks != 0) ]]; then pvers=("3.8" "3.9" "3.10" "3.11"); fi
if [[ $count == 0 || ($c_tasks == 0 && $c_pvers != 0) ]]; then tasks+=("unit" "type"); fi
if [[ $count == 0 ]]; then tasks+=("lint"); fi

# generate "task-pver" jobs
declare -A jobs;
for task in "${tasks[@]}"; do
    case "$task" in
        lint|docs|deps) jobs["$task-3.11"]=1;;
        *) for pver in "${pvers[@]}"; do jobs["$task-$pver"]=1; done;;
    esac
done

function post_build_cleanup() {
    temp=$1
    tag=$2

    rm -f $temp

    if [[ $(docker container ls --all --filter name=$tag) ]]; then
        docker container rm --force $tag &> /dev/null
    fi

    if [[ -z $save_build_images && $(docker image ls --filter reference=$tag) ]]; then
        docker image rm --force $tag &> /dev/null
    fi
}

function docker_build() {
    temp=$(mktemp)
    IFS=- read -r task pver <<< $1
    tag="daml-$task-$pver"

    if [[ $CI_PIPELINE_ID ]]; then
        tag="${tag}-${CI_PIPELINE_ID}"
    fi

    trap "post_build_cleanup $temp $tag" EXIT

    docker_build_cmd="docker build --cache-from $cache_tag --progress plain --build-arg python_version=$pver --tag $tag --target $task ."
    docker_run_args="--name $tag $gpuflag $tag"
    docker_run_envs="--env POETRY_HTTP_BASIC_JATIC_PASSWORD=${CI_JOB_TOKEN}${POETRY_HTTP_BASIC_JATIC_PASSWORD}"

    if [[ $verbose ]]; then
        (echo "Building $tag..."; echo $docker_build_cmd; $docker_build_cmd | tee $temp; exit ${PIPESTATUS[0]}) && \
        (echo "Running $tag..."; echo docker run $docker_run_args; docker run $docker_run_envs $docker_run_args | tee -a $temp; exit ${PIPESTATUS[0]}) || result="FAILED"
    else
        $docker_build_cmd &> $temp && docker run $docker_run_envs $docker_run_args &>> $temp || result="FAILED"
    fi

    if [[ $result == "FAILED" ]]; then
        log_file="output/logs/daml-${task}-${pver}_failure_$(date +%s).log"
        echo "FAILED (see log file ${log_file})"
        mkdir -p output/logs
        cat $temp > $log_file
        if [[ ! $verbose ]]; then cat $temp; fi
        exitcode=1
    else
        if [[ ! $verbose ]]; then echo SUCCEEDED; fi
        case "$task" in
            unit|func|docs|deps) docker cp $tag:/daml/output ./;;
        esac
    fi

    exit $exitcode
}

export DOCKER_BUILDKIT=1
export cache_tag="daml-cache"
export -f post_build_cleanup
export -f docker_build

echo "================== building cache image =================="
docker build --build-arg BUILDKIT_INLINE_CACHE=1 --pull $no_cache --progress plain --tag $cache_tag .
echo "--------------------------"
echo "build complete"
echo "=========================================================="

if [[ -n $build_only ]]; then
    echo "build-only option selected, done."
    exit 0
fi

[ ! -s ~/.jatic_token ] || export POETRY_HTTP_BASIC_JATIC_PASSWORD=$(<~/.jatic_token)
if [[ -z "${CI_JOB_TOKEN}${POETRY_HTTP_BASIC_JATIC_PASSWORD}" ]]; then
    echo
    echo "Please provide your JATIC Gitlab personal access token:"
    read -p "JATIC_TOKEN=" token
    echo $token > ~/.jatic_token
    chmod 600 ~/.jatic_token
    echo
    echo "Token saved in ~/.jatic_token"
    echo
    export POETRY_HTTP_BASIC_JATIC_PASSWORD=$token
fi

# execute jobs
case ${#jobs[@]} in
    0)  showHelp 1;;
    1)  export verbose=1; docker_build ${!jobs[@]};;
    *)  LANG=C parallel --lb --tag docker_build ::: ${!jobs[@]};;
esac
