#!/bin/bash -e

function showHelp() {
cat << EOF
Usage:
  devenv [options] <python version(s)>

Options:
  -h, --help        display this help information
  -v, --verbose     print output to console during container execution
      --no-cache    runs docker build without using the cache

Python Versions:
  3.8, 3.9, 3.10 and 3.11 are supported

EOF
exit $1
}

options=$(getopt -l "help,verbose,no-cache" -o "hv" -n "devenv" -- "$@")
eval set -- "$options"
while true; do
    case "$1" in
        -h|--help)       showHelp;;
        -v|--verbose)    export verbose=1;;
        --no-cache)      cache_arg="--no-cache";;
        --)              shift; break;;
    esac
    shift
done

# declare lookup maps
declare -A supported_pvers=([3.8]=1 [3.9]=1 [3.10]=1 [3.11]=1)
declare -A pvers

# validate args
for arg do
    if [[ $arg == -* ]]; then continue; fi
    if [[ ${supported_pvers[$arg]} ]]; then pvers[$arg]=1; continue; fi
    showHelp 1
done


# ensure all components are built or available
if [[ $verbose ]]; then verbosity="-v"; fi
if [[ ${#pvers[@]} != 0 ]]; then append_base="base"; fi
./build --build-only $verbosity $cache_arg ${!pvers[@]} $append_base

# if no python versions are specified, the devcontainer will have all
if [[ ${#pvers[@]} == 0 ]]; then pvers=([3.8]=1 [3.9]=1 [3.10]=1 [3.11]=1); fi

export base_image="harbor.jatic.net:443/daml/daml-base"
export deps_image="harbor.jatic.net:443/daml/daml-deps"
export base_hash=$(sha256sum Dockerfile | cut -c 1-8)
export deps_hash=$(sha256sum poetry.lock | cut -c 1-8)
export DOCKER_BUILDKIT=1

if [[ -z $verbose ]]; then verbosity="--quiet"; else verbosity="--progress=plain"; fi

echo "Building devcontainer with python ${!pvers[@]}..."
(cat Dockerfile && echo ENV versions=\"${!pvers[@]}\" && echo -n ${!pvers[@]} | xargs -d' ' -I{} echo COPY --chown=daml:daml --link --from=$deps_image:$deps_hash-{} \${PYENV_ROOT}/ \${PYENV_ROOT}/) |
docker build $verbosity $cache_arg --cache-from $base_image:$base_hash --tag daml-devcontainer --target devcontainer -
docker image prune -f
