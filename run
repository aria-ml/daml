#!/bin/bash -e

function showHelp() {
cat << EOF
Usage:
  run <task>

Tasks:
  unit    run unit tests
  func    run functional tests
  deps    run dependency tests
  type    run typecheck
  lint    run static code analysis
  docs    generate documentation
  qdocs   generate docs without notebooks
EOF
exit $1
}

if [ ! -f /.dockerenv ]; then
    echo "Docker container not found. Ensure requirements have been installed."
    echo
fi

declare -A supported_tasks=([unit]=1 [func]=1 [deps]=1 [type]=1 [lint]=1 [docs]=1 [qdocs]=1)

# validate args
if (( $# != 1 )); then echo Too many parameters; showHelp 1; fi
if [[ ! ${supported_tasks[$1]} ]]; then echo Invalid task; showHelp 1; fi

pver=$(python --version | cut -d' ' -f2 | cut -d'.' -f1-2)
case $1 in
    "unit"|"func")
        if [ "$1" == "unit" ]; then export CUDA_VISIBLE_DEVICES=-1; fi
        if [ "$1" == "func" ]; then args="--runfunctional"; fi
        poetry --quiet run pytest tests/check_prototype.py --verbose --pythonwarnings ignore::DeprecationWarning
        poetry --quiet run coverage run --data-file=output/.coverage.$1.$pver --source=daml --branch -m pytest $args --junitxml=output/junit.$1.$pver.xml --verbose --durations=0 --pythonwarnings ignore::DeprecationWarning
        poetry --quiet run coverage report --data-file=output/.coverage.$1.$pver
        poetry --quiet run coverage xml --data-file=output/.coverage.$1.$pver --skip-empty -o output/coverage.$1.$pver.xml
        poetry --quiet run coverage html --data-file=output/.coverage.$1.$pver --skip-empty -d output/htmlcov.$1.$pver
        ;;
    "deps")
        pip install poetry virtualenv
        python -m virtualenv .venv-deps
        source .venv-deps/bin/activate
        poetry install
        pip install pytest
        pytest --verbose --pythonwarnings ignore::DeprecationWarning tests/metrics/test_ber.py tests/metrics/test_divergence.py tests/metrics/test_uap.py
        rm -rf .venv-deps
        ;;
    "type")
        FAILURES=0
        trap 'FAILURES=$((FAILURES+1))' ERR
        poetry --quiet run pyright src/ tests/
        poetry --quiet run pyright --ignoreexternal --verifytypes daml
        exit $FAILURES
        ;;
    "lint")
        FAILURES=0
        trap 'FAILURES=$((FAILURES+1))' ERR
        poetry --quiet run ruff check --select E,F,I,RUF100 --exit-non-zero-on-fix --fix
        poetry --quiet run codespell
        exit $FAILURES
        ;;
    "docs"|"qdocs")
        pushd docs
        if [[ $pver == 3.8 ]]; then echo "Generating docs is not supported in python 3.8"; exit 1; fi
        if [ "$1" == "docs" ]; then poetry --quiet run jcache cache clear -f; fi
        export TF_CPP_MIN_LOG_LEVEL=3
        export PYDEVD_DISABLE_FILE_VALIDATION=1
        FAILURES=0
        trap 'FAILURES=$((FAILURES+1))' ERR
        NB_EXECUTION_MODE_OVERRIDE=off poetry --quiet run sphinx-build -M doctest . ../output/docs
        poetry --quiet run sphinx-build -E -T -b html -d _build/doctrees -D language=en . ../output/docs/html
        cp -R .jupyter_cache ../output/docs
        popd
        if [[ $FAILURES != 0 ]]; then cat /tmp/sphinx*.log && mv /tmp/sphinx*.log output/docs; fi
        exit $FAILURES
        ;;
esac
