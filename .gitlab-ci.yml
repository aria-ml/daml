workflow:
  rules:
  - if: $CI_COMMIT_TAG
    when: never
  - if: $CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS
    when: never
  - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    changes:
    - "**/*"
  - if: $CI_COMMIT_BRANCH

variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  PYTHON_LATEST_SUPPORTED_VERSION: "3.10"

cache:
  paths:
  - .cache/pip
  - venv/

.build_env:
  before_script:
  - python --version ; pip --version
  - pip install virtualenv
  - virtualenv venv
  - source venv/bin/activate
  - declare -A version_dict
  - version_dict['3.8']=py38
  - version_dict['3.9']=py39
  - version_dict['3.10']=py310

stages:
- test
- docs
- build
- security

test:
  stage: test
  image: python:$PYTHON_VERSIONS
  parallel:
    matrix:
    - PYTHON_VERSIONS: ["3.8", "3.9", "3.10"]
  before_script:
  - !reference [".build_env", "before_script"]
  - pip install tox
  script:
  - tox -e test-${version_dict[${PYTHON_VERSIONS}]}
  after_script:
  - mv .coverage .coverage.$PYTHON_VERSIONS
  artifacts:
    reports:
      junit: junit.xml
    paths:
    - junit.xml
    - ".coverage*"

coverage:
  stage: test
  image: python:$PYTHON_LATEST_SUPPORTED_VERSION
  needs:
  - job: test
    artifacts: true
  before_script:
  - !reference [".build_env", "before_script"]
  - pip install coverage
  script:
  - coverage combine
  - coverage report -m --skip-empty
  - coverage xml --skip-empty
  coverage: "/(?i)total.*? (100(?:\\.0+)?\\%|[1-9]?\\d(?:\\.\\d+)?\\%)$/"
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
    paths:
    - coverage.xml

linting:
  stage: test
  image: python:$PYTHON_LATEST_SUPPORTED_VERSION
  before_script:
  - !reference [".build_env", "before_script"]
  - pip install tox
  script:
  - tox -e lint

typecheck:
  stage: test
  image: python:$PYTHON_VERSIONS
  parallel:
    matrix:
    - PYTHON_VERSIONS: ["3.8", "3.9", "3.10"]
  before_script:
  - !reference [".build_env", "before_script"]
  - pip install tox
  script:
  - tox -e typecheck-${version_dict[${PYTHON_VERSIONS}]}

sphinx:
  stage: docs
  image: python:$PYTHON_LATEST_SUPPORTED_VERSION
  before_script:
  - apt-get update && apt-get upgrade -y
  - apt-get install graphviz -y
  - pip install sphinx sphinx-immaterial
  script:
  - cd docs && make html
  artifacts:
    paths:
    - docs/_build/html/

pages:
  stage: docs
  needs:
  - sphinx
  script:
  - mv docs/_build/html/ ./public/
  artifacts:
    paths:
    - public
  rules:
  - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"

tag:
  stage: build
  script:
  - |
    git fetch --tags
    currentVer=$(git describe --tags --abbrev=0 2>/dev/null) || exit_code=$?
    if [[ -z "$currentVer" ]]; then currentVer="v0.0.0"; fi
    echo "Latest tag found: $currentVer"
    currentMinorVer=$(cut -d '.' -f2 <<< $currentVer)
    pendingMinorVer=$(( 21+($(date +%s) - $(date -d "2023-07-19 UTC" +%s)) / (60*60*24*14) ))
    pendingVer="v0.$pendingMinorVer.0"
    patchVer=$(echo $currentVer | perl -pe 's/(\d+)(?!.*\d+)/$1+1/e')
    if (($pendingMinorVer > $currentMinorVer)); then newVer=$pendingVer; else newVer=$patchVer; fi
    echo "Tagging main branch with $newVer"
    curl --verbose --request POST \
    --header "PRIVATE-TOKEN: $DAML_BUILD_PAT" \
    "https://gitlab.jatic.net/api/v4/projects/$CI_PROJECT_ID/repository/tags?tag_name=$newVer&ref=main&release_description='DAML%20$newVer'"
  environment:
    name: production
  rules:
  - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"
    changes:
    - src/**/*
    - pyproject.toml

publish:
  stage: build
  needs:
  - tag
  image: python:$PYTHON_LATEST_SUPPORTED_VERSION
  script:
  - pip install build twine --upgrade
  - twine --version
  - python -m build
  - twine upload --repository-url ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/pypi -u gitlab-ci-token -p $DAML_BUILD_PAT dist/*
  environment:
    name: production
  rules:
  - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"
    changes:
    - src/**/*
    - pyproject.toml

include:
- template: Security/SAST.gitlab-ci.yml
- template: Security/Dependency-Scanning.gitlab-ci.yml
- template: Security/Secret-Detection.gitlab-ci.yml

secret_detection:
  stage: security
  rules:
  - if: $CI_PIPELINE_SOURCE == 'merge_request_event'

gemnasium-python-dependency_scanning:
  stage: security
  rules:
  - if: $CI_PIPELINE_SOURCE == 'merge_request_event'

semgrep-sast:
  stage: security
  rules:
  - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
