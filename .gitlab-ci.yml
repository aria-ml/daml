workflow:
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      changes:
        - "CHANGELOG.md"
      when: never
    - if: $CI_COMMIT_TAG
      when: never
    - if: $DAML_NIGHTLY
    - if: $CI_PIPELINE_SOURCE == 'web'
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

default:
  tags:
    - aria

stages:
  - prepare
  - test
  - release

.on_nightly:
  rules:
    - if: $DAML_NIGHTLY
      when: on_success
    - when: never

.on_default:
  rules:
    - if: $DAML_NIGHTLY
      when: never
    - when: on_success

.on_release:
  stage: release
  environment:
    name: production
  rules:
    - if: $DAML_NIGHTLY
      when: never
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      changes:
        - src/**/*
        - pyproject.toml

image: docker:20.10-git

variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  PYTHON_LATEST_SUPPORTED_VERSION: "3.11"
  DOCKER_DRIVER: overlay2

cache:
  paths:
    - .cache/pip
    - venv/

before_script:
  - if [[ ! $(which bash) ]]; then apk add --no-cache bash; fi

clean:
  stage: prepare
  script:
    - branch_name=$(git log -n 1 --format=%s | grep "^Merge branch" | cut -d"'" -f2) || echo "Unable to get merge branch name from commit log."
    - if [[ -z $branch_name ]]; then exit 0; fi
    - docker rmi --force daml-cache:${branch_name::120}
  rules:
    - if: $DAML_NIGHTLY
      when: never
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  allow_failure: true

build:
  script:
    - docker version
    - docker info
    - docker container ls --all --format '{{.Names}} - {{.Image}} => {{.Size}}'
    - docker image ls --all
    - docker volume ls --format '{{.Name}} -> {{.Size}}'
    - docker inspect $(docker image ls -aq)  --format '{{.RepoTags}} => {{.GraphDriver.Data.MergedDir}}'
    - for i in $(docker container ls --all --format '{{.Names}}'); do ./log_size $i; done
    - ./build --build-only
    - docker system prune --force
    - docker system df --verbose
    - docker system df
  retry: 2

generate shipped dependencies:
  image: python:$PYTHON_LATEST_SUPPORTED_VERSION
  before_script:
    - pip install poetry
  script:
    - ./run deps
  artifacts:
    paths:
      - output/requirements.txt
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'

linting:
  extends: .on_default
  needs: [build]
  script:
    - ./build lint

.test:
  stage: test
  needs: [build]
  parallel:
    matrix:
      - PYTHON_VERSIONS: ["3.8", "3.9", "3.10", "3.11"]
  script:
    - ./build ${PYTHON_VERSIONS} ${TASK}
  artifacts:
    reports:
      junit: output/junit.${TASK}.${PYTHON_VERSIONS}.xml
    paths:
      - output/junit.${TASK}.${PYTHON_VERSIONS}.xml
      - output/.coverage.${TASK}.${PYTHON_VERSIONS}
      - output/htmlcov.${TASK}.${PYTHON_VERSIONS}

test:
  extends:
    - .test
    - .on_default
  variables:
    TASK: unit

functional:
  extends:
    - .test
    - .on_nightly
  variables:
    TASK: func

coverage:
  stage: test
  image: python:$PYTHON_LATEST_SUPPORTED_VERSION
  needs:
    - job: test
      optional: true
      artifacts: true
    - job: functional
      optional: true
      artifacts: true
  before_script:
    - pip install coverage
  script:
    # TODO: Move coverage report generation in to build script (and/or resolve issue with using symlinks instead of a full recursive copy)
    - cp --recursive $(pwd) /daml
    - coverage combine ./output
    - coverage report -m --skip-empty
    - coverage xml --skip-empty
    - coverage html --skip-empty
  coverage: "/(?i)total.*? (100(?:\\.0+)?\\%|[1-9]?\\d(?:\\.\\d+)?\\%)$/"
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
    paths:
      - coverage.xml
      - htmlcov/

typecheck:
  extends: .on_default
  needs: [build]
  parallel:
    matrix:
      - PYTHON_VERSIONS: ["3.8", "3.9", "3.10", "3.11"]
  script:
    - ./build ${PYTHON_VERSIONS} type

sphinx:
  extends: .on_nightly
  stage: test
  needs: [build]
  #  tags: [GPU]
  script:
    - ./build docs # --gpu
  artifacts:
    paths:
      - output/docs/html/

pages:
  extends: .on_nightly
  needs:
    - job: sphinx
      artifacts: true
    - job: coverage
      artifacts: true
  stage: release
  script:
    - mv output/docs/html/ ./public/
    - mv htmlcov/ ./public/coverage/
  artifacts:
    paths:
      - public

tag:
  extends: .on_release
  before_script:
    - apk add --no-cache curl perl bash
  script:
    - ./.gitlab/auto_tag.sh

publish:
  extends: .on_release
  image: python:$PYTHON_LATEST_SUPPORTED_VERSION
  needs: [tag]
  script:
    - pip install build twine --upgrade
    - twine --version
    - python -m build
    - twine upload --repository-url ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/pypi -u gitlab-ci-token -p $DAML_BUILD_PAT dist/*

changelog:
  extends: .on_release
  image: python:$PYTHON_LATEST_SUPPORTED_VERSION
  needs: [publish]
  script:
    - pip install requests
    - python .gitlab/update_changelog.py

include:
  - template: Security/SAST.gitlab-ci.yml
  - template: Security/Dependency-Scanning.gitlab-ci.yml
  - template: Security/Secret-Detection.gitlab-ci.yml

secret_detection:
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'

gemnasium-python-dependency_scanning:
  needs:
    - job: generate shipped dependencies
      artifacts: true
  # Both `needs` and `dependencies` are used due to a quirk of gitlab.
  # `gemnasium-python-dependency_scanning` specifies an empty list of
  # dependencies, which means that unless you explicitly add the dependency,
  # all artifacts will be filtered out and removed from this job.
  dependencies:
    - generate shipped dependencies
  variables:
    # This seems like it *should* resolve the dev dependencies problem, but
    # it doesn't seem to work, probably due to the change in poetry 1.2.0 that
    # removed the "dev-dependencies" section in favor of naming a dependency group "dev"
    # (https://python-poetry.org/docs/managing-dependencies/#dependency-groups).
    # Leaving it configured for visibility, in case it gets fixed in the future.
    DS_INCLUDE_DEV_DEPENDENCIES: "false"
    DS_EXCLUDED_PATHS: "poetry.lock"
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'

semgrep-sast:
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
