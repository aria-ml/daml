workflow:
  # Allows jobs in this workflow to be interrupted:
  # https://gitlab.jatic.net/help/ci/yaml/index.md#workflowauto_cancelon_new_commit
  auto_cancel:
    on_new_commit: interruptible
  rules:
    # Release Workflow
    - if: $CI_PIPELINE_SOURCE == 'schedule' && $CREATE_NEW_RELEASE
    # Merge Request Workflow
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    # Skip CHANGELOG.md updates
    - if: $CI_COMMIT_BRANCH == 'main'
      changes: ["CHANGELOG.md"]
      when: never
    # Commit Main Branch Workflow
    - if: $CI_COMMIT_BRANCH == 'main'

default:
  # This should allow pipelines to auto-cancel when redundant:
  # https://gitlab.jatic.net/help/ci/pipelines/settings.md#auto-cancel-redundant-pipelines
  # https://gitlab.jatic.net/help/ci/yaml/index.md#interruptible
  interruptible: true
  tags:
    - autoscaler

variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  PYTHON_LATEST_SUPPORTED_VERSION: "3.11"
  DOCKER_DRIVER: overlay2

image: python:$PYTHON_LATEST_SUPPORTED_VERSION

cache:
  paths:
    - .cache/pip
    - venv/

stages:
  - build
  - test
  - docs
  - release

### RULE ANCHORS ###

.on_release: &on_release
  - if: $CREATE_NEW_RELEASE

.on_run: &on_run
  - if: $CREATE_NEW_RELEASE
    when: never
  - if: $CI_PIPELINE_SOURCE == 'merge_request_event' || $CI_COMMIT_BRANCH == 'main'

.on_merge_request: &on_merge_request
  - if: $CREATE_NEW_RELEASE
    when: never
  - if: $CI_PIPELINE_SOURCE == 'merge_request_event'

.on_commit_main: &on_commit_main
  - if: $CREATE_NEW_RELEASE
    when: never
  - if: $CI_COMMIT_BRANCH == 'main'

### PYTHON_VERSION PARALLEL MATRIX TEMPLATE ###

.python_version_matrix:
  parallel:
    matrix:
      - PYTHON_VERSION: ["3.8", "3.9", "3.10", "3.11"]

### DOCKER TEMPLATES ###

.docker_harbor_required:
  image: docker:24.0-git
  before_script:
    - if [[ ! $(which bash) ]]; then apk add --no-cache bash; fi
    - echo ${DAML_HARBOR_TOKEN} | docker login harbor.jatic.net:443 -u 'robot$daml+daml-build' --password-stdin
  after_script:
    - docker logout harbor.jatic.net:443

.docker_harbor_optional:
  needs: [build image]
  image: docker:24.0-git
  before_script:
    - if [[ ! $(which bash) ]]; then apk add --no-cache bash; fi
    - echo ${DAML_HARBOR_TOKEN} | docker login harbor.jatic.net:443 -u 'robot$daml+daml-build' --password-stdin || echo "WARNING - Failed to login"
  after_script:
    - docker logout harbor.jatic.net:443 || echo "WARNING - Failed to logout"

### BUILD ###

build base:
  stage: build
  extends: .docker_harbor_required
  script:
    - ./build --build-only --push --verbose base
  allow_failure: true
  rules: *on_run

build image:
  stage: build
  extends: [.docker_harbor_required, .python_version_matrix]
  needs: [verify lock, build base]
  script:
    - ./build --build-only --push --verbose ${PYTHON_VERSION}
  allow_failure: true
  rules: *on_run

verify lock:
  stage: build
  before_script:
    - pip install poetry
  script:
    - poetry check
  rules: *on_run

### TEST ###

linting:
  needs: []
  before_script:
    - pip install poetry
    - poetry config virtualenvs.create false
    - poetry install --only lint
  script:
    - ./run lint
  rules: *on_run

dependency tests:
  image: python:$PYTHON_VERSION
  extends: .python_version_matrix
  needs: []
  script:
    - ./run deps
  rules: *on_run

.run_tests:
  extends: [.docker_harbor_optional, .python_version_matrix]
  script:
    - ./build ${PYTHON_VERSION} ${TASK} ${ARGS} || TESTFAILED=1
    - if [[ $TESTFAILED ]]; then echo "=========== ${TASK} FAILED ==========="; EXITCODE=1; fi
    - ./build ${PYTHON_VERSION} type || TYPEFAILED=1
    - if [[ $TYPEFAILED ]]; then echo "=========== type FAILED ==========="; EXITCODE=1; fi
    - exit $EXITCODE
  artifacts:
    reports:
      junit: output/junit.${TASK}.${PYTHON_VERSION}.xml
    paths:
      - output/*

unit tests:
  extends: .run_tests
  variables:
    TASK: unit
  rules: *on_merge_request

functional tests:
  extends: .run_tests
  tags: [GPU]
  variables:
    TASK: func
    ARGS: --gpu
  rules: *on_commit_main

coverage:
  needs:
    - job: unit tests
      optional: true
      artifacts: true
    - job: functional tests
      optional: true
      artifacts: true
  before_script:
    - pip install coverage
  script:
    # TODO: Move coverage report generation in to build script (and/or resolve issue with using symlinks instead of a full recursive copy)
    - cp --recursive $(pwd) /daml
    - coverage combine ./output
    - coverage report -m --skip-empty --omit */_alibi_detect/*
    - coverage xml --skip-empty --omit */_alibi_detect/*
    - coverage html --skip-empty --omit */_alibi_detect/*
  coverage: "/(?i)total.*? (100(?:\\.0+)?\\%|[1-9]?\\d(?:\\.\\d+)?\\%)$/"
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
    paths:
      - coverage.xml
      - htmlcov/
  rules: *on_run

### DOCS ###

docs:
  stage: docs
  extends: .docker_harbor_optional
  tags: [GPU]
  script:
    - ./build docs --gpu
  artifacts:
    paths:
      - output/docs/.jupyter_cache/
      - output/docs/html/
  rules: *on_run

pages:
  stage: docs
  needs:
    - job: docs
      artifacts: true
    - job: coverage
      artifacts: true
  script:
    - mv output/docs/html/ ./public/
    - mv htmlcov/ ./public/coverage/
  artifacts:
    paths:
      - public
  rules: *on_commit_main

### RELEASE ###

# This job will only run if all previous stages have succeeded,
# and it creates a tag that signifies that all testing has passed.
tag release candidate:
  stage: release
  environment:
    name: production
  before_script:
    - pip install requests
  script:
    - .gitlab/scripts/update_latest_known_good.py
  rules: *on_commit_main

# This job updates the changelog and tags the commit hash with a
# new version tag, which gets picked up and published from a GitHub
# action defined in .github/workflows/publish.yml
create release:
  stage: release
  environment:
    name: production
  needs: []
  before_script:
    - pip install requests
  script:
    - .gitlab/scripts/create_release.py
  rules: *on_release

### SECURITY ###

include:
  - template: Security/Secret-Detection.gitlab-ci.yml
#  - template: Security/Dependency-Scanning.gitlab-ci.yml
#  - template: Security/SAST.gitlab-ci.yml

secret_detection:
  needs: []
  rules: *on_run

# generate shipped dependencies:
#   needs: []
#   before_script:
#     - pip install poetry
#     - poetry check
#     - poetry self add poetry-lock-groups-plugin
#   script:
#     - poetry lock --without test,lint,docs
#   artifacts:
#     paths:
#       - poetry.lock
#   rules: *on_run

# gemnasium-python-dependency_scanning:
#   needs:
#     - job: generate shipped dependencies
#       artifacts: true
#   # Both `needs` and `dependencies` are used due to a quirk of gitlab.
#   # `gemnasium-python-dependency_scanning` specifies an empty list of
#   # dependencies, which means that unless you explicitly add the dependency,
#   # all artifacts will be filtered out and removed from this job.
#   dependencies:
#     - generate shipped dependencies
#   rules: *on_run

# semgrep-sast:
#   needs: []
#   rules: *on_run
