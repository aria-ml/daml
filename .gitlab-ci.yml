workflow:
  rules:
  - if: $DAML_SCHEDULED_TEST_ARGS
  - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"
    changes:
    - "CHANGELOG.md"
    when: never
  - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
  - if: $CI_PIPELINE_SOURCE == 'web'
  - if: $CI_COMMIT_TAG
    when: never
  - if: $CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS
    when: never
  - if: $CI_COMMIT_BRANCH

variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  PYTHON_LATEST_SUPPORTED_VERSION: "3.11"

cache:
  paths:
  - .cache/pip
  - venv/

.build_env:
  before_script:
  - python --version ; pip --version
  - pip install virtualenv
  - virtualenv venv
  - source venv/bin/activate
  - declare -A version_dict
  - version_dict['3.8']=py38
  - version_dict['3.9']=py39
  - version_dict['3.10']=py310
  - version_dict['3.11']=py311

stages:
- test
- docs
- build
- security

test:
  stage: test
  image: python:$PYTHON_VERSIONS
  parallel:
    matrix:
    - PYTHON_VERSIONS: ["3.8", "3.9", "3.10", "3.11"]
  before_script:
  - !reference [".build_env", "before_script"]
  - pip install tox
  script:
  - tox -e ${version_dict[${PYTHON_VERSIONS}]} -- typecheck
  - tox -e ${version_dict[${PYTHON_VERSIONS}]} -- test $DAML_SCHEDULED_TEST_ARGS
  after_script:
  - mv .coverage .coverage.$PYTHON_VERSIONS
  artifacts:
    reports:
      junit: junit.xml
    paths:
    - junit.xml
    - ".coverage*"

coverage:
  stage: test
  image: python:$PYTHON_LATEST_SUPPORTED_VERSION
  needs:
  - job: test
    artifacts: true
  before_script:
  - !reference [".build_env", "before_script"]
  - pip install coverage
  script:
  - coverage combine
  - coverage report -m --skip-empty
  - coverage xml --skip-empty
  - coverage html --skip-empty
  coverage: "/(?i)total.*? (100(?:\\.0+)?\\%|[1-9]?\\d(?:\\.\\d+)?\\%)$/"
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
    paths:
    - coverage.xml
    - htmlcov/

linting:
  stage: test
  image: python:$PYTHON_LATEST_SUPPORTED_VERSION
  before_script:
  - !reference [".build_env", "before_script"]
  - pip install tox
  script:
  - tox -e lint

# typecheck:
#  stage: test
#   image: python:$PYTHON_VERSIONS
#   parallel:
#     matrix:
#     - PYTHON_VERSIONS: ["3.8", "3.9", "3.10", "3.11"]
#   before_script:
#   - !reference [".build_env", "before_script"]
#   - pip install tox
#   script:
#   - tox -e ${version_dict[${PYTHON_VERSIONS}]} -- typecheck

sphinx:
  stage: docs
  image: python:$PYTHON_LATEST_SUPPORTED_VERSION
  before_script:
  - apt-get update && apt-get upgrade -y
  - apt-get install graphviz pandoc -y
  - pip install tox
  script:
  - tox -e docs
  artifacts:
    paths:
    - docs/_build/html/

pages:
  stage: docs
  needs:
  - sphinx
  - coverage
  script:
  - mv docs/_build/html/ ./public/
  - mv htmlcov/ ./public/testcov/
  artifacts:
    paths:
    - public
  rules:
  - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"
  - if: $CI_PIPELINE_SOURCE == 'web'

tag:
  stage: build
  script:
  - ./.gitlab/auto_tag.sh
  environment:
    name: production
  rules:
  - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"
    changes:
    - src/**/*
    - pyproject.toml
  - if: $CI_PIPELINE_SOURCE == 'web' && $PUBLISH != 'true'
    when: never

publish:
  stage: build
  needs:
  - tag
  image: python:$PYTHON_LATEST_SUPPORTED_VERSION
  script:
  - pip install build twine --upgrade
  - twine --version
  - python -m build
  - twine upload --repository-url ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/pypi -u gitlab-ci-token -p $DAML_BUILD_PAT dist/*
  environment:
    name: production
  rules:
  - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"
    changes:
    - src/**/*
    - pyproject.toml
  - if: $CI_PIPELINE_SOURCE == 'web' && $PUBLISH != 'true'
    when: never

changelog:
  stage: build
  needs:
  - publish
  image: python:$PYTHON_LATEST_SUPPORTED_VERSION
  before_script:
  - pip install requests
  script:
  - python .gitlab/update_changelog.py
  environment:
    name: production
  rules:
  - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"
    changes:
    - src/**/*
    - pyproject.toml
  - if: $CI_PIPELINE_SOURCE == 'web' && $PUBLISH != 'true'
    when: never

include:
- template: Security/SAST.gitlab-ci.yml
- template: Security/Dependency-Scanning.gitlab-ci.yml
- template: Security/Secret-Detection.gitlab-ci.yml

secret_detection:
  stage: security
  rules:
  - if: $CI_PIPELINE_SOURCE == 'merge_request_event'

gemnasium-python-dependency_scanning:
  stage: security
  variables:
    DS_INCLUDE_DEV_DEPENDENCIES: "false"
  rules:
  - if: $CI_PIPELINE_SOURCE == 'merge_request_event'

semgrep-sast:
  stage: security
  rules:
  - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
