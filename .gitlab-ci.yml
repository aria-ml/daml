workflow:
  rules:
  - if: $DAML_NIGHTLY
  - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    changes:
    - "CHANGELOG.md"
    when: never
  - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
  - if: $CI_COMMIT_TAG
    when: never
  - if: $CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS
    when: never
  - if: $CI_COMMIT_BRANCH

default:
  tags:
    - aria

stages:
- info
- prune
- test
- build

image: python:$PYTHON_LATEST_SUPPORTED_VERSION

variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  PYTHON_LATEST_SUPPORTED_VERSION: "3.11"
  DOCKER_DRIVER: overlay2

cache:
  paths:
  - .cache/pip
  - venv/

before_script:
  - if [[ ! $(which bash) ]]; then apk add --no-cache bash parallel; fi

info:
  stage: info
  image: docker:git
  script:
    - docker system df
    - docker container ls --all
    - docker image ls --all
    - docker volume ls

# Clear unused docker data on nightly basis
prune:
  stage: prune
  image: docker:git
  script:
  - docker system df --verbose
  - docker builder prune --force --keep-storage 50GB
  - docker image prune --force
  - docker system df
  allow_failure: true
  rules:
  - if: $DAML_NIGHTLY
    when: always
  - when: never

.test:
  stage: test
  image: docker:git
  parallel:
    matrix:
    - PYTHON_VERSIONS: ["3.8", "3.9", "3.10", "3.11"]
  script:
  - ./build -v ${PYTHON_VERSIONS} ${TASK}
  artifacts:
    reports:
      junit: ./output/junit.${TASK}.${PYTHON_VERSIONS}.xml
    paths:
    - ./output/junit.${TASK}.${PYTHON_VERSIONS}.xml
    - ./output/.coverage.${TASK}.${PYTHON_VERSIONS}
    - ./output/htmlcov.${TASK}.${PYTHON_VERSIONS}

test:
  extends: .test
  variables:
    TASK: unit
  rules:
  - if: $DAML_NIGHTLY
    when: never
  - when: always

functional:
  extends: .test
  variables:
    TASK: func
  rules:
  - if: $DAML_NIGHTLY
    when: always

coverage:
  stage: test
  needs:
  - job: test
    artifacts: true
  before_script:
  - pip install coverage
  script:
  # TODO: Move coverage report generation in to build script (and/or resolve issue with using symlinks instead of a full recursive copy)
  - cp --recursive $(pwd) /daml
  - coverage combine ./output
  - coverage report -m --skip-empty
  - coverage xml --skip-empty
  - coverage html --skip-empty
  coverage: "/(?i)total.*? (100(?:\\.0+)?\\%|[1-9]?\\d(?:\\.\\d+)?\\%)$/"
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
    paths:
    - coverage.xml
    - htmlcov/
  rules:
  - if: $DAML_NIGHTLY
    when: never
  - when: always

linting:
  stage: test
  image: docker:git
  script:
  - ./build -v lint
  rules:
  - if: $DAML_NIGHTLY
    when: never
  - when: always

typecheck:
  image: docker:git
  parallel:
    matrix:
      - PYTHON_VERSIONS: ["3.8", "3.9", "3.10", "3.11"]
  script:
    - ./build -v ${PYTHON_VERSIONS} type
  rules:
  - if: $DAML_NIGHTLY
    when: never
  - when: always

sphinx:
  stage: test
  image: docker:git
  script:
  - ./build -v docs
  artifacts:
    paths:
    - docs/_build/html/
  rules:
  - if: $DAML_NIGHTLY
    when: never
  - when: always

pages:
  stage: build
  script:
  - mv docs/_build/html/ ./public/
  - mv htmlcov/ ./public/testcov/
  artifacts:
    paths:
    - public
  rules:
  - if: $DAML_NIGHTLY
    when: never
  - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH || ($CI_PIPELINE_SOURCE == 'web' && $PUBLISH == 'true')
    needs: ['sphinx', 'coverage']

tag:
  stage: build
  script:
  - ./.gitlab/auto_tag.sh
  environment:
    name: production
  rules:
  - if: $DAML_NIGHTLY
    when: never
  - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    changes:
    - src/**/*
    - pyproject.toml

publish:
  stage: build
  needs:
  - tag
  image: python:$PYTHON_LATEST_SUPPORTED_VERSION
  script:
  - pip install build twine --upgrade
  - twine --version
  - python -m build
  - twine upload --repository-url ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/pypi -u gitlab-ci-token -p $DAML_BUILD_PAT dist/*
  environment:
    name: production
  rules:
  - if: $DAML_NIGHTLY
    when: never
  - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    changes:
    - src/**/*
    - pyproject.toml

changelog:
  stage: build
  needs:
  - publish
  image: python:$PYTHON_LATEST_SUPPORTED_VERSION
  before_script:
  - pip install requests
  script:
  - python .gitlab/update_changelog.py
  environment:
    name: production
  rules:
  - if: $DAML_NIGHTLY
    when: never
  - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    changes:
    - src/**/*
    - pyproject.toml

include:
- template: Security/SAST.gitlab-ci.yml
- template: Security/Dependency-Scanning.gitlab-ci.yml
- template: Security/Secret-Detection.gitlab-ci.yml

secret_detection:
  rules:
  - if: $CI_PIPELINE_SOURCE == 'merge_request_event'

gemnasium-python-dependency_scanning:
  variables:
    DS_INCLUDE_DEV_DEPENDENCIES: "false"
  rules:
  - if: $CI_PIPELINE_SOURCE == 'merge_request_event'

semgrep-sast:
  rules:
  - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
