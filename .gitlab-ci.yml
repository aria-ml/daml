workflow:
  rules:
    - if: $CI_COMMIT_BRANCH == 'main'
      changes:
        - "CHANGELOG.md"
      when: never
    - if: $CI_COMMIT_TAG
      when: never
    - if: $CI_PIPELINE_SOURCE == 'web'
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: $CI_COMMIT_BRANCH == 'main' || $CI_COMMIT_BRANCH == 'develop'

default:
  tags:
    - autoscaler

stages:
  - build
  - test
  - release

.on_release:
  stage: release
  environment:
    name: production
  rules:
    - if: $CI_COMMIT_BRANCH == 'main'
      changes:
        - src/**/*
        - pyproject.toml

.docker_harbor_required:
  image: docker:24.0-git
  before_script:
    - if [[ ! $(which bash) ]]; then apk add --no-cache bash; fi
    - echo ${DAML_HARBOR_TOKEN} | docker login harbor.jatic.net:443 -u 'robot$daml+daml-build' --password-stdin
  after_script:
    - docker logout harbor.jatic.net:443

.docker_harbor_optional:
  image: docker:24.0-git
  before_script:
    - if [[ ! $(which bash) ]]; then apk add --no-cache bash; fi
    - echo ${DAML_HARBOR_TOKEN} | docker login harbor.jatic.net:443 -u 'robot$daml+daml-build' --password-stdin || echo "WARNING - Failed to login"
  after_script:
    - docker logout harbor.jatic.net:443 || echo "WARNING - Failed to logout"

image: python:$PYTHON_LATEST_SUPPORTED_VERSION

variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  PYTHON_LATEST_SUPPORTED_VERSION: "3.11"
  DOCKER_DRIVER: overlay2

cache:
  paths:
    - .cache/pip
    - venv/

verify lock:
  stage: build
  before_script:
    - pip install poetry
  script:
    - poetry check

build base:
  extends: .docker_harbor_required
  stage: build
  script:
    - ./build --build-only --push --verbose base
  allow_failure: true

build image:
  extends: .docker_harbor_required
  stage: build
  needs: [verify lock, build base]
  parallel:
    matrix:
      - PYTHON_VERSION: ["3.8", "3.9", "3.10", "3.11"]
  script:
    - ./build --build-only --push --verbose ${PYTHON_VERSION}
  allow_failure: true

linting:
  needs: []
  before_script:
    - pip install poetry
    - poetry config virtualenvs.create false
    - poetry install --only dev
  script:
    - ./run lint

test:
  extends: .docker_harbor_optional
  stage: test
  needs: [build image]
  parallel:
    matrix:
      - PYTHON_VERSION: ["3.8", "3.9", "3.10", "3.11"]
  script:
    - ./build ${PYTHON_VERSION} ${TASK} || TESTFAILED=1
    - if [[ $TESTFAILED ]]; then echo "=========== ${TASK} FAILED ==========="; EXITCODE=1; fi
    - ./build ${PYTHON_VERSION} type || TYPEFAILED=1
    - if [[ $TYPEFAILED ]]; then echo "=========== type FAILED ==========="; EXITCODE=1; fi
    - exit $EXITCODE
  artifacts:
    reports:
      junit: output/junit.${TASK}.${PYTHON_VERSION}.xml
    paths:
      - output/*
  rules:
    - if: $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == 'main'
      when: on_success
      variables:
        TASK: func
    - when: on_success
      variables:
        TASK: unit

lite:
  stage: test
  image: python:$PYTHON_VERSION
  needs: []
  parallel:
    matrix:
      - PYTHON_VERSION: ["3.8", "3.9", "3.10", "3.11"]
  script:
    - ./run lite

coverage:
  stage: test
  needs:
    - job: test
      optional: true
      artifacts: true
    - job: functional
      optional: true
      artifacts: true
  before_script:
    - pip install coverage
  script:
    # TODO: Move coverage report generation in to build script (and/or resolve issue with using symlinks instead of a full recursive copy)
    - cp --recursive $(pwd) /daml
    - coverage combine ./output
    - coverage report -m --skip-empty --omit */_alibi_detect/*
    - coverage xml --skip-empty --omit */_alibi_detect/*
    - coverage html --skip-empty --omit */_alibi_detect/*
  coverage: "/(?i)total.*? (100(?:\\.0+)?\\%|[1-9]?\\d(?:\\.\\d+)?\\%)$/"
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
    paths:
      - coverage.xml
      - htmlcov/

docs:
  extends: [.docker_harbor_optional]
  needs: [build image]
  stage: test
  tags: [GPU]
  script:
    - ./build docs --gpu
  artifacts:
    paths:
      - output/docs/html/

pages:
  extends: .on_release
  needs:
    - job: docs
      artifacts: true
    - job: coverage
      artifacts: true
  stage: release
  script:
    - mv output/docs/html/ ./public/
    - mv htmlcov/ ./public/coverage/
  artifacts:
    paths:
      - public

tag:
  image: docker:24.0-git
  extends: .on_release
  before_script:
    - apk add --no-cache curl perl bash
  script:
    - ./.gitlab/auto_tag.sh --post

publish:
  extends: .on_release
  needs: [tag]
  script:
    - pip install build twine --upgrade
    - twine --version
    - python -m build
    - twine upload --repository-url ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/pypi -u gitlab-ci-token -p $DAML_BUILD_PAT dist/*

changelog:
  extends: .on_release
  needs: [publish]
  script:
    - pip install requests
    - python .gitlab/update_changelog.py

include:
 - template: Security/Secret-Detection.gitlab-ci.yml
#  - template: Security/Dependency-Scanning.gitlab-ci.yml
#  - template: Security/SAST.gitlab-ci.yml

secret_detection:
  needs: []
  rules:
    - if: $CI_COMMIT_REF_PROTECTED == "true"
    - if: $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == 'main'
    - if: $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == 'develop'

# gemnasium-python-dependency_scanning:
#   needs:
#     - job: generate shipped dependencies
#       artifacts: true
#   # Both `needs` and `dependencies` are used due to a quirk of gitlab.
#   # `gemnasium-python-dependency_scanning` specifies an empty list of
#   # dependencies, which means that unless you explicitly add the dependency,
#   # all artifacts will be filtered out and removed from this job.
#   dependencies:
#     - generate shipped dependencies
#   rules:
#     - if: $CI_COMMIT_REF_PROTECTED == "true"

# semgrep-sast:
#   needs: []
#   rules:
#     - if: $CI_COMMIT_REF_PROTECTED == "true"

# generate shipped dependencies:
#   stage: build
#   before_script:
#     - pip install poetry
#     - poetry check
#     - poetry self add poetry-lock-groups-plugin
#   script:
#     - poetry lock --without dev --without docs --without jatic
#   artifacts:
#     paths:
#       - poetry.lock
#   rules:
#     - if: $CI_COMMIT_REF_PROTECTED == "true"

# .test:
#   extends: .docker_harbor_optional
#   stage: test
#   needs: [build image]
#   parallel:
#     matrix:
#       - PYTHON_VERSION: ["3.8", "3.9", "3.10", "3.11"]
#   script:
#     - ./build ${PYTHON_VERSION} ${TASK}
#   artifacts:
#     reports:
#       junit: output/junit.${TASK}.${PYTHON_VERSION}.xml
#     paths:
#       - output/junit.${TASK}.${PYTHON_VERSION}.xml
#       - output/.coverage.${TASK}.${PYTHON_VERSION}
#       - output/htmlcov.${TASK}.${PYTHON_VERSION}

# typecheck:
#   extends: [.docker_harbor_optional]
#   needs: [build image]
#   parallel:
#     matrix:
#       - PYTHON_VERSION: ["3.8", "3.9", "3.10", "3.11"]
#   script:
#     - ./build ${PYTHON_VERSION} type
