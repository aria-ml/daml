#!/bin/bash -e

function showHelp() {
cat << EOF
Usage:
 container-check [options] <python version(s)> <tasks(s)>

Options:
 -h, --help       display this help information
 -v, --verbose    print output to console during container execution
 --no-cache       runs docker build without using the cache

Default:
 run unit and type tests for 3.8-3.11 as well as lint and docs

Python Versions:
 3.8, 3.9, 3.10 and 3.11 are supported for unit, func and type tasks

Tasks:
 unit             run unit tests
 func             run functional tests
 type             run typecheck
 lint             run static code analysis
 docs             generate documentation

Note:
 lint and docs are always performed on python 3.11
EOF
}

options=$(getopt -l "help,verbose,no-cache" -o "hv" -n "container-check" -- "$@")
eval set -- "$options"
while true; do
    case "$1" in
        -h|--help)
            showHelp; exit 0;;
        -v|--verbose)
            export verbose="true";;
        --no-cache)
            export no_cache="--no-cache";;
        --)
            shift; break;;
    esac
    shift
done

# declare allowed value maps
declare -A a_pvers=([3.8]=1 [3.9]=1 [3.10]=1 [3.11]=1)
declare -A a_ptsks=([unit]=1 [func]=1 [type]=1)
declare -A a_stsks=([lint]=1 [docs]=1)

# generate python and task lists
declare -a pvers; declare -a ptsks; declare -a stsks
count=0; c_pvers=0; c_ptsks=0; c_stsks=0

# validate args
for arg do
    if [[ $arg == -* ]]; then continue; fi
    if [[ ${a_pvers["$arg"]} ]]; then pvers+=($arg); ((++c_pvers)); fi
    if [[ ${a_ptsks["$arg"]} ]]; then ptsks+=($arg); ((++c_ptsks)); fi
    if [[ ${a_stsks["$arg"]} ]]; then stsks+=($arg); ((++c_stsks)); fi
    ((++count))
done

# show help if arg count mismatch
if [[ $((c_pvers + c_ptsks + c_stsks)) != $count ]]; then
    showHelp
    exit 1
fi

# set defaults if not specified
if [[ $count == 0 || ($c_pvers == 0 && $c_ptsks != 0) ]]; then pvers=("3.8" "3.9" "3.10" "3.11"); fi
if [[ $count == 0 || ($c_ptsks == 0 && $c_pvers != 0) ]]; then ptsks=("unit" "type"); fi
if [[ $count == 0 ]]; then stsks=("lint" "docs"); fi

t_list="";p_list=""
# handle special tasks (lint + docs)
for task in "${stsks[@]}"; do
    if [[ $task == "lint" || $task == "docs" ]]; then
        t_list+="$task "
        p_list+="3.11 "
    fi
done

# handle python tasks (unit + func + type)
for task in "${ptsks[@]}"; do
    for pver in "${pvers[@]}"; do
        t_list+="$task "
        p_list+="$pver "
    done
done

function copy_from_image() {
    tag=$1
    src=$2
    dest=$3

    id=$(docker ps --all --filter name=$tag --quiet)
    if [[ $id ]]; then
        docker rm --force $id &> /dev/null
    fi

    docker run --detach --name $tag $tag tail -f /dev/null &> /dev/null
    docker cp $tag:$src $dest
    docker rm --force $tag &> /dev/null
}

function docker_build() {
    temp=$(mktemp)
    tag="daml-$2-$1"
    docker build $no_cache --build-arg python_version=$1 --tag $tag --target $2 . &> $temp || result="FAILED"

    job="Python ${1} - ${2}"
    echo -n "-> $job: "
    if [[ $result == "FAILED" ]]; then
        log_file="daml-${2}-${1}_failure_$(date +%s).log"
        echo "FAILED (see log file ${log_file})"
        cat $temp > $log_file
    else
        echo SUCCEEDED
        if [[ $verbose == "true" ]]; then
            echo "========== Output =========="
            cat $temp
            echo "========== ^^^^^ Output from $job ^^^^^ =========="$'\n\n'
        fi
    fi
    rm $temp

    if [[ $2 == "unit" ]]; then
        copy_from_image $tag /daml/junit.xml    ./junit.${1}.xml
        copy_from_image $tag /daml/.coverage    ./.coverage.${1}
        copy_from_image $tag /daml/coverage.xml ./coverage.${1}.xml
        copy_from_image $tag /daml/htmlcov      ./htmlcov.${1}
    fi

    if [[ $2 == "docs" ]]; then
        copy_from_image $tag /daml/docs/_build ./docs
    fi
}

export -f copy_from_image
export -f docker_build

echo "Building containers..."
LANG=C parallel --link --keep-order docker_build ::: $p_list ::: $t_list
